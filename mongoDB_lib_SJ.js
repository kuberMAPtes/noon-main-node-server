// 1. mongoose Î™®Îìà Í∞ÄÏ†∏Ïò§Í∏∞
var mongoose = require('mongoose');

async function mongooseSetup(){

    // 2. testDB ÏÑ∏ÌåÖ
    const username = 'scott';
    const password = 'tiger6609!';
    const encodedPassword = encodeURIComponent(password);
    const dbURI = `mongodb://${username}:${encodedPassword}@127.0.0.1:27017/sss`;
    console.log(dbURI);

    mongoose.connect(dbURI)
    .then(() => console.log('‚úÖ mongoose connected'))
    .catch(err => console.log('MongoDB connection error:', err));
    
    // 3. Ïó∞Í≤∞Îêú testDB ÏÇ¨Ïö©
    var db = mongoose.connection;

    // 4. Ïó∞Í≤∞ Ïã§Ìå®
    db.on('error', function(){
        console.log('Connection Failed!');
    });
    // 5. Ïó∞Í≤∞ ÏÑ±Í≥µ
    db.once('open', function() {
        console.log('‚úÖ mongoDB connected');
    });

    // 6. Schema ÏÉùÏÑ±
    var chatMessageSchema = new mongoose.Schema({
        chatroomID : String,
        chatroomName : String,
        sender : String,
        chatMsg : String,
        time : { type: Date, default: Date.now },
        readMembers : [String]
    });

    var popularChatroomSchema = new mongoose.Schema({
      chatroomID: String,
      messageCount: Number,
      timestamp: { type: Date, default: Date.now, expires: '24h' }
    });
    
    // 7. Ï†ïÏùòÎêú Ïä§ÌÇ§ÎßàÎ•º Í∞ùÏ≤¥Ï≤òÎüº ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎèÑÎ°ù model Ìï®ÏàòÎ°ú Ïª¥ÌååÏùº (Î¨∏ÏûêÏó¥ '' Î°ú Ï†ÅÏùÄÍ≤å Ïª¨Î†âÏÖòÏù¥ Îê®)
    var ModelChatMessage = mongoose.model('ChatMessage', chatMessageSchema);
    var ModelpopularChatroom = mongoose.model('PopularChatroom', popularChatroomSchema);

    return {ModelChatMessage, ModelpopularChatroom};
}


async function mongooseReadOne(ModelChat, search){
    // 9. ÌäπÏ†ï Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
    try {
      console.log("ü¶ê mongooseReadOne Ïã§Ìñâ , Í≤ÄÏÉâÏ°∞Í±¥ => ", search);
        const searchedChat = await ModelChat.findOne(search);
        console.log('Chat found:', searchedChat);

        return searchedChat;

        } catch (err) {
        console.error(err);
        }
}

async function mongooseReadMany(ModelChat, search){
    // 10. Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
    try {
        console.log("ü¶ê mongooseReadMany Ïã§Ìñâ , Í≤ÄÏÉâÏ°∞Í±¥ => ", search);
        const searchedChats = await ModelChat.find(search);
        console.log('Chats found number:', searchedChats.length);

        return searchedChats;

        } catch (err) {
        console.error(err);
        }
}

async function mongooseWrite(ModelChat,chat){
    // 8. Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
    try {
        console.log("ü¶ê mongooseWrite Ïã§Ìñâ , ÏûëÏÑ±ÎÇ¥Ïö© => ", chat);
        const newChat = new ModelChat(chat);
        await newChat.save();
        console.log('Chat stored to mongoDB:', newChat);
      } catch (err) {
        console.error(err);
      }   
}

async function mongooseUpdate(ModelChat, update_query, update_action){
    // 11. Îç∞Ïù¥ÌÑ∞ ÏàòÏ†ï
    try {
        console.log(`ü¶ê mongooseUpdate Ïã§Ìñâ`);
        const updatedChat = await ModelChat.updateMany(update_query, update_action);
        
        console.log('Chat updated to mongoDB:', updatedChat);
        return updatedChat;

      } catch (err) {
        console.error(err);
      }
}

async function mongooseDelete(ModelChat){
    // 12. Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
    try {
        console.log("ü¶ê mongooseDelete Ïã§Ìñâ");
        const deletedChat = await ModelChat.findOneAndDelete({ name: 'Alice' });
        console.log('Chat deleted from mongoDB:', deletedChat);
      } catch (err) {
        console.error(err);
      }
}


module.exports = {
    mongooseSetup,
    mongooseWrite,
    mongooseReadOne,
    mongooseReadMany,
    mongooseUpdate,
    mongooseDelete
};
